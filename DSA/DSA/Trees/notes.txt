- Tree is a data structure that stores items in an hierarchical manner.
- The items stored are called nodes and their connections are called edges.
- There are two special types of nodes: the root node and the leaf node.
- The root node is a node that has children, and can be seen as the "top of the hierarchy".
- The leaf node if a node that has no children, and can be seen as the lowest level in the hierarchy.
- The most taught and seen kind of tree is the binary tree, where each node has, at most, two children.
- There is a special kind of binary tree which is a binary search tree, on which every item in the left of the root node is less than the root node and every item on the right of the root node is higher than the root node.
- There are 3 main operations we can perform:
    -> Lookup: Time complexity of O(log(n))
    -> Insert: Time complexity of O(log(n))
    -> Delete: Time complexity of O(log(n))
- There are two ways of of traversing a tree: breadth first and depth first.
- Breadth first approach is also called Level Order traversal, because you visit each level of the tree at a time.
- In depth first approach, we have 3 ways of doing so:
    -> Pre-order traversal: Root, Left, Right
    -> In-order traversal: Left, Root, Right
    -> Post-order traversal: Left, Right, Root
- It is called in depth traversal because we start at the root node and go deep down to it's children and grandchildren.
- There are two important properties in trees:
    -> Depth: We start counting from the root until we reach a leaf. For each edge we go through, we add a new "level" in the depth count. Root nodes have 0 depth.
    -> Height: We start counting from the leaf nodes until we reach thee root node. Whenever we go through a edge, we add a new "level" in the height count. The height of the root node is also called the "height of the tree". There is a formula to calculate the height which is 1+max(height(L),height(R))
